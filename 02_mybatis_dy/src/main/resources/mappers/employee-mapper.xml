<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="employee">
	<resultMap type="emp" id="empMap">
	<!-- 
		1:1관계 => association 태그를 이용해서 연결.
		result태그의 마지막에 사용 
		id태그가 반드시 설정되어 있어야한다
	-->
		<id property="empId" column="emp_id"/>
		<result property="empName" column="emp_name"/>
		<result property="empNo" column="emp_no"/>
		<!-- <result property="deptCode" column="dept_code"/> -->
		<result property="jobCode" column="job_code"/>
		<result property="salLevel" column="sal_level"/>
		<result property="managerId" column="manager_id"/>
		<result property="hireDate" column="hire_date"/>
		<result property="entDate" column="ent_date"/>
		<result property="entYn" column="ent_yn"/>
		<result property="email" column="email"/>
		<result property="phone" column="phone"/>
		<result property="salary" column="salary"/>
		<result property="bonus" column="bonus"/>
		<association property="dept" resultMap="departmentMap"/>
	</resultMap>
	<resultMap id="departmentMap" type="department">
		<id property="deptId" column="dept_id"/>
		<result property="deptTitle" column="dept_title"/>
		<result property="locationId" column="location_id"/>
		<!-- 1:다수 관계일 때 -->
		<collection property="employees" resultMap="empMap"/>
	</resultMap>
	
	<select id="selectAllDept" resultMap="departmentMap">
		SELECT * FROM DEPARTMENT LEFT JOIN EMPLOYEE ON DEPT_CODE=DEPT_ID
	</select>
	
	<select id="selectAllEmp" resultMap="empMap">
		<!-- SELECT * 
		FROM 
			(SELECT E.*,
				DECODE(SUBSTR(EMP_NO,8,1),'1','M','3','M','2','F','4','F') AS GENDER 
			FROM EMPLOYEE E JOIN DEPARTMENT D ON D.DEPT_ID=E.DEPT_CODE) -->
		SELECT * FROM EMPLOYEE JOIN DEPARTMENT ON DEPT_ID=DEPT_CODE
	</select>
	
	<!-- 
		파라미터값을 가져오는 두가지 방법 $,#
			#{} : setType()값을 대입 -> 자료형에 맞는 리터럴을 대입 -> 'emp_id'
			${} : 문자열을 처리하는 표현 -> emp_id
	-->
	<select id="searchEmp" resultMap="empMap" parameterType="map">
	<!-- 	SELECT * FROM EMPLOYEE WHERE ${type} LIKE '%'||#{keyword}||'%' 
		IF SUBSTR(EMP_NO,8,1) IN (2,4)
		THEN 
		ELSE IF SUBSTR(EMP_NO,8,1) IN (1,3)
		 -->
		SELECT * 
		FROM 
			(SELECT E.*,
				DECODE(SUBSTR(EMP_NO,8,1),'1','M','3','M','2','F','4','F') AS GENDER 
			FROM EMPLOYEE E) WHERE 1=1
		<!-- <where> -->
		<!-- <trim prefix="WHERE" prefixOverrides="AND|OR"> -->
			<if test="salFlag!=null and salFlag!='' and salary!=null and salary!=''">
				<choose>
					<when test="salFlag eq 'ge'">
						 AND SALARY <![CDATA[>=]]>#{salary}
					</when>
					<otherwise>
						<!-- AND SALARY <![CDATA[<=]]>#{salary} -->
						AND SALARY &lt;= #{salary}
					</otherwise>
				</choose>
			</if>
			<if test="keyword!=null and keyword!=''">
				AND ${type} LIKE '%'||#{keyword}||'%'
			</if>
			<if test="gender!=null and gender!=''">
				AND GENDER=#{gender} 
			</if>
		<!-- </where> -->
		<!-- </trim>  -->
			<if test="deptCodes!=null and deptCodes!=''">
				AND DEPT_CODE IN 
				<!-- 
					foreach문으로 한 항목에 여러개의 값을 가져올 수 있다
					collection : 배열방식의 데이터 
					item : 배열의 데이터를 저장하는 변수명
					open : 반복을 시작할 때 출력할 값을 설정
					close :  반복을 끝낼 때 출력할 값
					separator :반복할 때 마다 출력할 값 
					index : 배열의 인덱스번호를 저장하는 변수
				 -->
				<foreach collection="deptCodes" item="d" open='(' close=')' separator=','>
					#{d}
				</foreach>
			</if>
			<if test="jobCodes!=null and jobCodes!=''">
				AND JOB_CODE IN
				<foreach collection="jobCodes" item="j" open="(" close=")" separator=",">
					#{j}
				</foreach>
			</if>
			<if test="hireDate!=null and hireDate!='' and hDFlag!=null and hDFlag!=''">
				<choose>
					<when test="hDFlag eq before">
						AND HIRE_DATE &lt; TO_DATE(#{hireDate},'YYYY-MM-DD')
					</when>
					<otherwise>
						AND HIRE_DATE > TO_DATE(#{hireDate},'YYYY-MM-DD')
					</otherwise>
				</choose>
			</if>
	</select>
	<select id="selectAllEmpCount" resultType="_int">
		SELECT COUNT(*) FROM EMPLOYEE
	</select>
</mapper>